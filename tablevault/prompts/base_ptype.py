from pydantic import BaseModel, Field, model_validator
from tablevault.prompts.utils import utils
from tablevault.prompts.table_string import DataTable
from tablevault.defintions import constants, tv_errors, types

class TVPrompt(BaseModel):
    name: str = Field(description="Name of prompt (autogenerated). Do not have to file.")
    dtypes: dict[str, str] = Field(default={}, description="Specify Pandas datatype of output columns: \{column_name\: dtype\}.")
    dependencies: list[DataTable] = Field(description="Specifies table dependecies of this prompt.")
    changed_columns: list[str] = Field(description="Specifies the output column names that are generated.")
    ptype: str = Field(description="Type of prompt. See tablevault.prompts.ptype_mapping for currently supported Prompts.")
    
    @model_validator(mode="before")
    @classmethod
    def transform_table_string_fields(cls, values):
        for field_name in cls.model_fields.keys():
            if field_name in values:
                values[field_name] = utils.apply_table_string(values[field_name])
        return values

    def execute(self,
                cache: types.Cache,
                instance_id: str,
                table_name: str,
                db_dir: str):
        raise tv_errors.TVImplementationError('Not Implemented')

def _get_table_dependencies(table_name: str, prompts: dict[str, TVPrompt]) -> list[str]:
    dependencies = set()
    for pname in prompts:
        for dep in prompts[pname].dependencies:
            if dep.table != constants.TABLE_SELF and dep.table != table_name:
                dependencies.add(dep.table)
    return list(dependencies)

def order_tables_by_prompts(all_prompts: dict[str, TVPrompt]):
    all_dependencies = {}
    for table_name in all_prompts:
        all_dependencies[table_name] = _get_table_dependencies(
            table_name, all_prompts[table_name]
        )
    table_names = utils.topological_sort(list(all_dependencies.keys()), all_dependencies)
    return table_names

